class ::Hash
    def deep_merge(second)
        merger = proc { |key, v1, v2| Hash === v1 && Hash === v2 ? v1.merge(v2, &merger) : [:undefined, nil, :nil].include?(v2) ? v1 : v2 }
        self.merge(second, &merger)
    end
end

# this will break if pwd is not equal to the dir holding the Vagrantfile
# 
# TODO: change this once we figure out how to access the information where the root Vagrantfile is
project_vagrantfile = Dir.pwd + File::SEPARATOR + 'Vagrantfile'
unless File.exist?(project_vagrantfile)
  raise 'Cannot find Vagrantfile, quitting.'
end
project_root = File.dirname(project_vagrantfile)

defaults = {
    "net" => {
        "aliases"  => [],
        "tld"      => "dev"
    },
    "vm" => {
        "cpu"      => 2,
        "ram"      => 512,
        "gui"      => false
    },
    "app" => {
        "env"      => "development"
    }
}

config_file = project_root + File::SEPARATOR + 'config.yaml'
if File.exists?(config_file)
    require 'yaml'
    settings = YAML.load_file(config_file)
    settings = defaults.deep_merge(settings)
else
    settings = defaults
end

# mandatory plugins
unless Vagrant.has_plugin?("vagrant-hostmanager")
    raise 'Missing required plugin vagrant-hostmanager, install with "vagrant plugin install vagrant-hostmanager"'
end

if Vagrant::Util::Platform.windows?
    unless Vagrant.has_plugin?("vagrant-winnfsd")
        raise 'Missing required plugin vagrant-winnfsd, install with "vagrant plugin install vagrant-winnfsd"'
    end
end

Vagrant.configure(2) do |config|
    config.vm.network "private_network", type: "dhcp"
    if settings["net"]["hostname"]
        config.vm.hostname = (["app", settings["net"]["hostname"], settings["net"]["tld"]]).join(".")
    end
    
    vmname = nil
    if settings["vm"]["name"]
        # excplicit name set
        vmname = settings["vm"]["name"]
    elsif settings["net"]["hostname"]
        # default from hostname
        vmname = settings["net"]["hostname"]
    end

    # VirtualBox provider config
    config.vm.provider "virtualbox" do |vm|
        if vmname
            vm.name = vmname
        end
    
        vm.gui  = settings["vm"]["gui"]
        vm.customize ["modifyvm", :id, "--cpus", settings["vm"]["cpu"]]
        vm.customize ["modifyvm", :id, "--memory", settings["vm"]["ram"]]
        vm.customize ["modifyvm", :id, "--ioapic", "on"]
        vm.customize ["modifyvm", :id, "--bioslogodisplaytime", "1"]
    end

    if Vagrant::Util::Platform.windows?
        # mount options not supported by winnfsd
        config.vm.synced_folder ".", "/vagrant", :type => "nfs"
    else
        config.vm.synced_folder ".", "/vagrant", :type => "nfs", mount_options: ["nolock", "vers=3", "tcp", "noatime", "actimeo=1"]
    end

    # /etc/hosts manager
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    if settings["net"]["hostname"]
        config.hostmanager.aliases = (((settings["net"]["aliases"] + [settings["net"]["hostname"]]) + (settings["net"]["aliases"] + [settings["net"]["hostname"]]).map{ |a| 'www.' + a}).map{ |a| a + '.' + settings["net"]["tld"] }).join(' ')
    end
    config.hostmanager.ip_resolver = proc do |vm|
        if vm.id
            `VBoxManage guestproperty get #{vm.id} "/VirtualBox/GuestInfo/Net/1/V4/IP"`.split()[1]
        end
    end

    if File.exist?(project_root + File::SEPARATOR + 'Puppetfile')
        # puppet module installation
        config.vm.provision "shell" do |s|
            s.inline = "PUPPETFILE=/vagrant/Puppetfile PUPPETFILE_DIR=/etc/puppet/modules /usr/bin/r10k puppetfile install"
        end
    end

    if File.exist?(project_root + File::SEPARATOR + 'puppet' + File::SEPARATOR + 'default.pp')
        # puppet provision
        config.vm.provision "puppet" do |puppet|
            puppet.manifests_path = "puppet"
            puppet.manifest_file = "default.pp"
            puppet.facter = {
                "app_environment" => settings["app"]["env"],
                "app_hostname" => settings["net"]["hostname"],
                "host_hostname" => ENV['HOSTNAME'],
                "host_domain" => ENV['HOSTNAME'],
                "host_fqdn" => ENV['HOSTNAME'],
            }
        end
    end
end
